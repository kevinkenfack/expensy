generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  name      String?
  email     String?
  imageUrl  String?
  currency  String   @default("EUR")
  language  String   @default("fr")
  theme     String   @default("dark")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  goals        Goal[]
  recurrings   RecurringTransaction[]
}

model Category {
  id          String          @id @default(cuid())
  name        String
  icon        String
  type        TransactionType
  color       String?
  description String?
  isDefault   Boolean         @default(false)
  isArchived  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]
  recurrings   RecurringTransaction[]

  @@index([userId])
  @@unique([userId, name, type]) // Empêche les doublons pour un utilisateur
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  description String?
  date        DateTime
  type        TransactionType
  status      Status          @default(COMPLETED)
  paymentMode PaymentMode?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  recurringId String?
  recurring   RecurringTransaction? @relation(fields: [recurringId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@index([date])
}

model Budget {
  id        String   @id @default(cuid())
  amount    Float
  month     Int      @db.SmallInt
  year      Int
  notes     String?
  isRolling Boolean  @default(false) // Report du budget non utilisé
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@unique([userId, categoryId, month, year])
}

model Goal {
  id          String    @id @default(cuid())
  name        String
  targetAmount Float
  currentAmount Float    @default(0)
  startDate   DateTime
  targetDate  DateTime
  type        GoalType
  status      GoalStatus @default(IN_PROGRESS)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RecurringTransaction {
  id          String            @id @default(cuid())
  amount      Float
  description String?
  frequency   RecurringFrequency
  startDate   DateTime
  endDate     DateTime?
  lastExecuted DateTime?
  type        TransactionType
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  transactions Transaction[]

  @@index([userId])
  @@index([categoryId])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMode {
  CASH
  CARD
  TRANSFER
  CHECK
  DIRECT_DEBIT
  OTHER
}

enum GoalType {
  SAVINGS
  DEBT_PAYMENT
  PURCHASE
  EMERGENCY_FUND
  OTHER
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
} 